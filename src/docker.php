<?php

namespace Castor\Docker;

use Castor\Attribute\AsListener;
use Castor\Container;
use Castor\Context;
use Castor\Event\AfterBootEvent;
use Symfony\Component\Process\Process;

use function Castor\run;
use function Castor\variable;
use function Castor\context;
use function Castor\yaml_dump;

/**
 * @param list<string> $subCommand
 * @param list<string> $profiles
 */
function docker_compose(array $subCommand, ?Context $c = null, array $profiles = []): Process
{
    $c ??= context();
    $profiles = $profiles ?: ['default'];

    $c = $c
        ->withTimeout(null)
        ->withEnvironment([
            'PHP_VERSION' => variable('php_version'),
        ])
    ;

    $command = [
        'docker',
        'compose',
    ];

    if (isset($c['project_name'])) {
        $command[] = '-p';
        $command[] = $c['project_name'];
    }

    foreach ($profiles as $profile) {
        $command[] = '--profile';
        $command[] = $profile;
    }

    $command[] = '-f';
    $command[] = $c->workingDirectory . '/compose.yaml';

    $command = array_merge($command, $subCommand);

    return run($command, context: $c);
}

function docker_compose_run(
    string $runCommand,
    string $service,
    ?Context $c = null,
    bool $noDeps = true,
    ?string $workDir = null,
    bool $portMapping = false,
): Process {
    $command = [
        'run',
        '--rm',
    ];

    if ($noDeps) {
        $command[] = '--no-deps';
    }

    if ($portMapping) {
        $command[] = '--service-ports';
    }

    if (null !== $workDir) {
        $command[] = '-w';
        $command[] = $workDir;
    }

    $command[] = $service;
    $command[] = '/bin/sh';
    $command[] = '-c';
    $command[] = "exec {$runCommand}";

    return docker_compose($command, c: $c);
}

function docker_exit_code(
    string $runCommand,
    ?Context $c = null,
    string $service = 'builder',
    bool $noDeps = true,
    ?string $workDir = null,
): int {
    $c = ($c ?? context())->withAllowFailure();

    $process = docker_compose_run(
        runCommand: $runCommand,
        service: $service,
        c: $c,
        noDeps: $noDeps,
        workDir: $workDir,
    );

    return $process->getExitCode() ?? 0;
}

#[AsListener(AfterBootEvent::class)]
function initialize(): void
{
    $c = context();
    $dispatcher = Container::get()->eventDispatcher;

    $event = new GenerateComposeEvent(content: [
        'services' => [],
    ]);
    $dispatcher->dispatch($event);

    $yamlContent = yaml_dump($event->content, inline: 5);

    file_put_contents($c->workingDirectory . '/compose.yaml',
        <<<YAML
        # This file is generated by Castor. Do not edit it manually.
        
        YAML
    );
    file_put_contents($c->workingDirectory . '/compose.yaml', $yamlContent, FILE_APPEND);
}
